import sys
from pathlib import Path
from uuid import uuid4
from datetime import datetime
import json
import streamlit as st
from copy import replace
import matplotlib.pyplot as plt
from collections import defaultdict, OrderedDict

# ----------------- Paths -----------------
ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(ROOT))

# ----------------- Imports -----------------
from core.transforms import load_seed, add_transaction, update_budget, account_balance, load_users, authenticate
from core.domain import User, Transaction, Account, Category, Budget
from core.recursion import flatten_categories, sum_expenses_recursive, by_category, by_date_range, by_amount_range
from core.memo import forecast_expenses_timed
from core.ftypes import validate_transaction, check_budget, Maybe, Either

# ----------------- Streamlit config -----------------
st.set_page_config(page_title="Financial Manager", layout="wide")
st.title("üíº Financial Manager")

# ----------------- Load data -----------------
accounts, categories, transactions, budgets = load_seed(str(ROOT / "data/seed.json"))
users = load_users(str(ROOT / "data/seed.json"))

# ----------------- Session state -----------------
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "user" not in st.session_state:
    st.session_state.user = None
if "transactions" not in st.session_state:
    st.session_state.transactions = transactions  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–∏–Ω —Ä–∞–∑

# ----------------- Authentication -----------------
if not st.session_state.logged_in:
    st.subheader("üîê Login")
    username = st.text_input("Username", key="login_username")
    password = st.text_input("Password", type="password", key="login_password")
    if st.button("Sign In"):
        user = authenticate(users, username, password)
        if user:
            st.session_state.logged_in = True
            st.session_state.user = user
            st.session_state.transactions = transactions
            st.success(f"Welcome, {user.username} ({user.role})")
        else:
            st.error("‚ùå Invalid username or password")

# ----------------- Main app -----------------
if st.session_state.logged_in and st.session_state.user is not None:
    user = st.session_state.user

    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    if user.role == "admin":
        user_accounts = accounts
        visible_transactions = st.session_state.transactions
    else:
        user_accounts = [a for a in accounts if getattr(a, "user_id", None) == user.username]
        visible_transactions = [t for t in st.session_state.transactions if t.account_id in [a.id for a in user_accounts]]

    # --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é ---
    st.sidebar.success(f"Logged in as {user.username} ({user.role})")
    menu_items = ["Overview", "Data", "Functional Core", "Pipelines", "Reports"]
    choice = st.sidebar.radio("üìã Menu", menu_items)

    # ----------------- Overview -----------------
    if choice == "Overview":
        st.header("üìä Overview")
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Accounts", len(user_accounts))
        col2.metric("Categories", len(categories))
        col3.metric("Transactions", len(visible_transactions))
        total_balance = sum(a.balance for a in user_accounts) + sum(t.amount for t in visible_transactions)
        col4.metric("Total Balance", total_balance)

    # ----------------- Data -----------------
    elif choice == "Data":
        st.header("üìÅ Data Explorer")
        st.subheader("Accounts")
        st.table([a.__dict__ for a in user_accounts])
        st.subheader("Categories")
        st.table([c.__dict__ for c in categories])
        st.subheader("Transactions (first 20)")
        st.table([t.__dict__ for t in visible_transactions[:20]])

    # ----------------- Functional Core -----------------
    elif choice == "Functional Core":
        st.header("‚ûï Add Transaction")

        if not user_accounts:
            st.warning("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è.")
        else:
            acc = st.selectbox("üí≥ Account", user_accounts, format_func=lambda a: a.name)
            cat = st.selectbox("üìÇ Category", categories, format_func=lambda c: c.name)
            amount = st.number_input("üí∞ Amount", value=0, step=100)
            note = st.text_input("üìù Note", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–¥—É–∫—Ç—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞...")

            signed_amount = abs(int(amount)) if "income" in cat.id.lower() or "income" in cat.name.lower() else -abs(int(amount))

            if st.button("Add Transaction"):
                t = Transaction(
                    id=str(uuid4()),
                    account_id=acc.id,
                    user_id=user.username,
                    cat_id=cat.id,
                    amount=signed_amount,
                    ts=datetime.now().isoformat(timespec="seconds"),
                    note=note,
                    deleted=False
                )
                st.session_state.transactions = add_transaction(st.session_state.transactions, t)

                # –û–±–Ω–æ–≤–ª—è–µ–º seed.json
                seed_path = ROOT / "data/seed.json"
                with open(seed_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                data["transactions"].append(t.__dict__)
                with open(seed_path, "w", encoding="utf-8") as f:
                    json.dump(data, f, indent=4, ensure_ascii=False)

                st.success("‚úÖ Transaction added and saved successfully!")
                with st.expander("üìú View last transaction"):
                    st.json(t.__dict__)

        # --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ ---
        st.divider()
        st.subheader("üíº Your Transactions")

        if user.role == "admin":
            user_transactions = st.session_state.transactions
        else:
            user_transactions = [t for t in st.session_state.transactions if t.user_id == user.username and not t.deleted]

        if user_transactions:
            selected = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—É–¥–∞–ª–µ–Ω–∏—è:",
                user_transactions[::-1],
                format_func=lambda t: f"{t.note or '(–±–µ–∑ –∑–∞–º–µ—Ç–∫–∏)'} ‚Äî {t.amount} ({t.ts})"
            )
            with st.expander("üìÑ –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", expanded=True):
                st.markdown(f"""
                    **ID:** {selected.id}  
                    **Account:** {selected.account_id}  
                    **User:** {selected.user_id}  
                    **Category:** {selected.cat_id}  
                    **Amount:** {selected.amount}  
                    **Timestamp:** {selected.ts}  
                    **Note:** {selected.note}  
                    **Deleted:** {"Yes" if selected.deleted else "No"}  
                    """)

            if not selected.deleted:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"):
                    deleted_tr = replace(selected, deleted=True)
                    st.session_state.transactions = [deleted_tr if t.id == selected.id else t for t in st.session_state.transactions]

                    # –û–±–Ω–æ–≤–ª—è–µ–º seed.json
                    seed_path = ROOT / "data/seed.json"
                    with open(seed_path, "r", encoding="utf-8") as f:
                        data = json.load(f)
                    for idx, tr in enumerate(data["transactions"]):
                        if tr["id"] == selected.id:
                            data["transactions"][idx]["deleted"] = True
                            break
                    with open(seed_path, "w", encoding="utf-8") as f:
                        json.dump(data, f, indent=4, ensure_ascii=False)

                    st.warning("üö´ Transaction marked as deleted (visible only to admin).")
            else:
                st.info("‚ö†Ô∏è –≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–∞—è.")

        else:
            st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
    
        # ----------------- Pipelines (–õ–∞–±–∞ 2+3) ‚Äî —É–ª—É—á—à–µ–Ω–Ω—ã–π -----------------
    elif choice == "Pipelines":
        import matplotlib.pyplot as plt
        from datetime import datetime

        st.header("üîÑ Data Filters & Recursive Reports")
        st.markdown("–ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")

        # --- –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
        with st.expander("üîç –§–∏–ª—å—Ç—Ä—ã", expanded=True):
            col1, col2, col3 = st.columns(3)
            with col1:
                sel_cat = st.selectbox(
                    "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                    [None] + [c for c in categories],
                    format_func=lambda c: c.name if c else "‚Äî –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî"
                )
            with col2:
                sel_from = st.date_input("üìÖ –° (–Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞)", value=None)
            with col3:
                sel_to = st.date_input("üìÖ –ü–æ (–∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞)", value=None)

            min_amt = st.number_input("üí∞ –ú–∏–Ω. —Å—É–º–º–∞", value=-1000000, step=100)
            max_amt = st.number_input("üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞", value=1000000, step=100)

            # –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            apply_filter = st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")

        # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
        def parse_ts(ts: str):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏."""
            try:
                return datetime.fromisoformat(ts)
            except Exception:
                try:
                    return datetime.strptime(ts.split(".")[0], "%Y-%m-%dT%H:%M:%S")
                except Exception:
                    return None

        filtered = visible_transactions

        if apply_filter:
            # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if sel_cat:
                filtered = [t for t in filtered if getattr(t, "cat_id", None) == sel_cat.id]

            # –ü–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
            if sel_from and sel_to:
                filtered = [
                    t for t in filtered
                    if (dt := parse_ts(getattr(t, "ts", "")))
                    and sel_from <= dt.date() <= sel_to
                ]

            # –ü–æ —Å—É–º–º–µ
            filtered = [t for t in filtered if min_amt <= t.amount <= max_amt]

        # --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ ---
        st.divider()
        st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

        st.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: **{len(filtered)}**")

        if filtered:
            st.dataframe(
                [
                    {
                        "ID": t.id,
                        "Account": t.account_id,
                        "Category": t.cat_id,
                        "Amount": t.amount,
                        "Date": t.ts,
                        "Note": t.note,
                    }
                    for t in filtered[:50]
                ],
                use_container_width=True
            )

            # --- –ú–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ —Å—É–º–º –ø–æ –¥–∞—Ç–∞–º ---
            try:
                dates = [parse_ts(t.ts) for t in filtered if parse_ts(t.ts)]
                amounts = [t.amount for t in filtered if parse_ts(t.ts)]
                if dates:
                    st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                    fig, ax = plt.subplots()
                    ax.plot(dates, amounts, marker="o", linestyle="-")
                    ax.set_xlabel("–î–∞—Ç–∞")
                    ax.set_ylabel("–°—É–º–º–∞")
                    ax.set_title("–ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                    ax.grid(True)
                    plt.xticks(rotation=30)
                    st.pyplot(fig)
            except Exception as e:
                st.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

        else:
            st.warning("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.")

        # --- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ—Ç—á—ë—Ç ---
        st.divider()
        st.subheader("üßÆ Recursive Report by Category")

        root_cat = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            categories,
            format_func=lambda c: f"{c.name} ({c.id})"
        )

        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"):
            try:
                flat_cats = flatten_categories(tuple(categories), root_cat.id)
                total = sum_expenses_recursive(flat_cats, visible_transactions, root_cat.id)
                st.success(f"üíµ Total expenses recursively under **{root_cat.name}**: {total}")

                st.json([c.__dict__ for c in flat_cats], expanded=False)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–º –æ—Ç—á—ë—Ç–µ: {e}")

        # ----------------- Reports (–õ–∞–±–∞ 3+4) ‚Äî —É–ª—É—á—à–µ–Ω–Ω—ã–π -----------------
    elif choice == "Reports":
        import calendar
        from datetime import datetime
        from collections import defaultdict, OrderedDict
        import matplotlib.pyplot as plt

        st.header("üìà Reports & Forecast")
        st.markdown("–ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ –º–µ—Å—è—Ü–∞–º).")

        # --- –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ ---
        # –ü–æ–∫–∞–∂–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ expense –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á—Ç–æ–±—ã –ø—Ä–æ–≥–Ω–æ–∑ –±—ã–ª –ø—Ä–æ —Ä–∞—Å—Ö–æ–¥—ã),
        # –Ω–æ –æ—Å—Ç–∞–≤–∏–º –æ–ø—Ü–∏—é –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë.
        show_all = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è –¥–æ—Ö–æ–¥—ã)", value=False)
        if show_all:
            cat_list = categories
        else:
            cat_list = [c for c in categories if getattr(c, "type", "").lower() != "income"]

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –∏–º–µ–Ω–∞)
        cat = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–∞", cat_list, format_func=lambda c: f"{c.name} ({c.id})")

        # –ø–µ—Ä–∏–æ–¥ –≤ –º–µ—Å—è—Ü–∞—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞/–∞–Ω–∞–ª–∏–∑–∞
        period = st.slider("–ü–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–µ—Å—è—Ü–µ–≤, —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—Ü–µ–≤ —É—á–∏—Ç—ã–≤–∞—Ç—å)", 1, 24, 6)

        # --- –°–æ–±–∏—Ä–∞–µ–º –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
        def parse_ts(ts):
            try:
                return datetime.fromisoformat(ts)
            except Exception:
                # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±—Ä–µ–∑–∞—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å None
                try:
                    return datetime.strptime(ts.split(".")[0], "%Y-%m-%dT%H:%M:%S")
                except Exception:
                    return None

        monthly = defaultdict(int)  # –∫–ª—é—á: (–≥–æ–¥, –º–µ—Å—è—Ü) -> —Å—É–º–º–∞
        for t in visible_transactions:
            try:
                if getattr(t, "cat_id", None) != cat.id:
                    continue
                dt = parse_ts(getattr(t, "ts", ""))
                if not dt:
                    continue
                key = (dt.year, dt.month)
                monthly[key] += t.amount
            except Exception:
                continue

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        if not monthly:
            st.info("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤–∏–¥–∏–º–æ–π –≤—ã–±–æ—Ä–∫–µ.")
        else:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_keys = sorted(monthly.keys())
            # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ OrderedDict –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            monthly_ordered = OrderedDict((k, monthly[k]) for k in sorted_keys)

            # –í–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤ (period)
            last_keys = sorted_keys[-period:]
            labels = [f"{k[0]}-{k[1]:02d}" for k in last_keys]
            values = [monthly[k] for k in last_keys]

            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total = sum(values)
            avg = total / len(values) if values else 0
            median = sorted(values)[len(values)//2] if values else 0

            # –ü–æ–ª—É—á–∏–º –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ cached-—Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è)
            try:
                forecast_val, ms = forecast_expenses_timed(cat.id, visible_transactions, period)
            except Exception as e:
                forecast_val, ms = None, None

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
            col1, col2, col3 = st.columns(3)
            col1.metric("–ü–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü–µ–≤)", f"{len(values)}")
            col2.metric("–°—É–º–º–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", f"{total}")
            col3.metric("–°—Ä–µ–¥–Ω–µ–µ / –º–µ—Å", f"{avg:.2f}")

            if forecast_val is not None:
                st.info(f"–ü—Ä–æ–≥–Ω–æ–∑ (cached) –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {forecast_val} (–≤—ã—á–∏—Å–ª–µ–Ω–æ –∑–∞ {ms:.3f} ms)")

            # –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Å—è—Ü–∞–º–∏
            st.subheader("–î–µ—Ç–∞–ª–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
            rows = [{"month": labels[i], "amount": values[i]} for i in range(len(labels))]
            st.table(rows)

            # --- –ì—Ä–∞—Ñ–∏–∫ (matplotlib) ---
            st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ—Å—è—Ü–∞–º")
            fig, ax = plt.subplots()
            ax.plot(labels, values, marker="o")  # –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º —Ü–≤–µ—Ç–∞
            ax.set_title(f"Monthly sums ‚Äî {cat.name}")
            ax.set_xlabel("Month")
            ax.set_ylabel("Amount")
            ax.grid(True)
            plt.xticks(rotation=30)
            st.pyplot(fig)

            # --- –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç—Ä–µ–Ω–¥ / –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ---
            st.subheader("–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)")
            next_period_estimate = avg
            st.write(f"–û—Ü–µ–Ω–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü (–ø–æ —Å—Ä–µ–¥–Ω–µ–º—É): **{next_period_estimate:.2f}**")

            # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤)
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)"):
                import io, csv
                buffer = io.StringIO()
                writer = csv.writer(buffer)
                writer.writerow(["month", "amount"])
                for r in rows:
                    writer.writerow([r["month"], r["amount"]])
                st.download_button("–°–∫–∞—á–∞—Ç—å CSV", data=buffer.getvalue(), file_name=f"report_{cat.id}.csv", mime="text/csv")

        st.caption("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –¥–æ—Ö–æ–¥–∞–º ‚Äî –æ—Ç–º–µ—Ç—å—Ç–µ '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'.")


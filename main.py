import sys
from pathlib import Path
import streamlit as st
from datetime import datetime
from core.transforms import delete_old_transactions

sys.path.append(str(Path(__file__).resolve().parent.parent))

from core.domain import Account, Category, Transaction, Budget
from core.transforms import load_seed, account_balance, save_seed, add_transaction, update_budget

DATA_PATH = "data/seed.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if "users" not in st.session_state:
    users, categories, transactions, budgets = load_seed(DATA_PATH)
    st.session_state["users"] = users
    st.session_state["categories"] = categories
    st.session_state["transactions"] = transactions
    st.session_state["budgets"] = budgets
    st.session_state["current_user"] = None

users = st.session_state["users"]
categories = st.session_state["categories"]
transactions = st.session_state["transactions"]
budgets = st.session_state["budgets"]


# –§—É–Ω–∫—Ü–∏–∏: –∑–∞–º—ã–∫–∞–Ω–∏—è –∏ —Ä–µ–∫—É—Ä—Å–∏—è

# –ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def transaction_filter(category=None, min_amount=None, max_amount=None, start_date=None, end_date=None):
    def filter_fn(transactions):
        filtered = []
        for t in transactions:
            if category and t.cat_id != category:
                continue
            if min_amount is not None and t.amount < min_amount:
                continue
            if max_amount is not None and t.amount > max_amount:
                continue
            if start_date and datetime.fromisoformat(t.ts) < start_date:
                continue
            if end_date and datetime.fromisoformat(t.ts) > end_date:
                continue
            filtered.append(t)
        return filtered
    return filter_fn

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
def recursive_budget_check(budget_list, transaction_list):
    if not budget_list:
        return []
    b = budget_list[0]
    spent = sum(t.amount for t in transaction_list if t.cat_id == b.cat_id)
    exceeded = []
    if spent > b.limit:
        exceeded.append(b.cat_id)
    return exceeded + recursive_budget_check(budget_list[1:], transaction_list)

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def delete_old_transactions(transactions, cutoff_date):
    if not transactions:
        return []
    t = transactions[0]
    rest = delete_old_transactions(transactions[1:], cutoff_date)
    if datetime.fromisoformat(t.ts) < cutoff_date:
        return rest
    else:
        return [t] + rest


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

if st.session_state["current_user"] is None:
    st.set_page_config(page_title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", layout="centered")
    st.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

    username = st.text_input("–õ–æ–≥–∏–Ω")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–í–æ–π—Ç–∏"):
        user = next((u for u in users if u.username == username and u.password == password), None)
        if user:
            st.session_state["current_user"] = user
            st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!")
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    st.stop()

current_user = st.session_state["current_user"]
st.set_page_config(page_title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", layout="wide")
st.title("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")


# –ú–µ–Ω—é

menu = ["–û–±–∑–æ—Ä", "–î–∞–Ω–Ω—ã–µ", "–î–µ–π—Å—Ç–≤–∏—è"]
if getattr(current_user, "is_admin", False):
    menu.append("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")

choice = st.sidebar.radio("–ú–µ–Ω—é", menu)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if not getattr(current_user, "is_admin", False):
    transactions = [t for t in transactions if t.account_id == current_user.id]
    budgets = [b for b in budgets if getattr(b, "user_id", None) == current_user.id]


# –ú–µ–Ω—é: –û–±–∑–æ—Ä

if choice == "–û–±–∑–æ—Ä":
    st.header("üìä –û–±–∑–æ—Ä")
    st.write(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)}")
    st.write(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories)}")
    st.write(f"üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {len(transactions)}")
    st.write(f"üìë –ë—é–¥–∂–µ—Ç—ã: {len(budgets)}")

    if getattr(current_user, "is_admin", False):
        total_balance = sum(account_balance(transactions, u.id) for u in users)
    else:
        total_balance = account_balance(transactions, current_user.id)
    st.metric("üíµ –ë–∞–ª–∞–Ω—Å", f"{total_balance} KZT")


# –ú–µ–Ω—é: –î–∞–Ω–Ω—ã–µ
elif choice == "–î–∞–Ω–Ω—ã–µ":
    st.header("üìÇ –î–∞–Ω–Ω—ã–µ")
    st.subheader("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    st.table([current_user.__dict__])
    st.subheader("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    st.table([c.__dict__ for c in categories])
    st.subheader("üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 20)")
    st.dataframe([t.__dict__ for t in transactions[:20]])
    st.subheader("üìë –ë—é–¥–∂–µ—Ç—ã")
    st.table([b.__dict__ for b in budgets])

# –ú–µ–Ω—é: –î–µ–π—Å—Ç–≤–∏—è
elif choice == "–î–µ–π—Å—Ç–≤–∏—è":
    st.header("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
    cat_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", [c.id for c in categories])
    amount = st.number_input("–°—É–º–º–∞", value=0)
    note = st.text_input("–ó–∞–º–µ—Ç–∫–∞")

    if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
        new_t = Transaction(
            id=f"t{len(st.session_state['transactions']) + 1}",
            account_id=current_user.id,
            cat_id=cat_id,
            amount=amount,
            ts=datetime.now().isoformat(timespec="seconds"),
            note=note,
        )
        st.session_state["transactions"] = add_transaction(st.session_state["transactions"], new_t)
        save_seed(
            DATA_PATH,
            st.session_state["users"],
            st.session_state["categories"],
            st.session_state["transactions"],
            st.session_state["budgets"],
        )
        st.success("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª!")

    #–§–∏–ª—å—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π 
    st.subheader("üîé –§–∏–ª—å—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    filter_cat = st.selectbox("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", [None] + [c.id for c in categories])
    min_amount = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", value=0)
    max_amount = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞", value=0)
    if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"):
        filtered = transaction_filter(
            category=filter_cat if filter_cat is not None else None,
            min_amount=min_amount if min_amount != 0 else None,
            max_amount=max_amount if max_amount != 0 else None
        )(transactions)
        st.dataframe([t.__dict__ for t in filtered])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ 
    st.subheader("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞")
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—é–¥–∂–µ—Ç"):
        exceeded = recursive_budget_check(budgets, transactions)
        if exceeded:
            st.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {', '.join(exceeded)}")
        else:
            st.success("–ë—é–¥–∂–µ—Ç –≤ –Ω–æ—Ä–º–µ!")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π 
    st.subheader("üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    cutoff_str = st.date_input("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ –¥–∞—Ç—ã")
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å"):
        cutoff_date = datetime.combine(cutoff_str, datetime.min.time())
        old_count = len(st.session_state["transactions"])
        st.session_state["transactions"] = delete_old_transactions(
            st.session_state["transactions"], cutoff_date
        )
        deleted_count = old_count - len(st.session_state["transactions"])
        save_seed(
            DATA_PATH,
            st.session_state["users"],
            st.session_state["categories"],
            st.session_state["transactions"],
            st.session_state["budgets"],
        )
        st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ {cutoff_date.date()}!")

# –ú–µ–Ω—é: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ

elif choice == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ" and getattr(current_user, "is_admin", False):
    st.header("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
    selected_uid = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", [u.id for u in users])
    selected_user = next(u for u in users if u.id == selected_uid)
    st.subheader(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {selected_user.username}")
    st.table([selected_user.__dict__])
    user_transactions = [t.__dict__ for t in transactions if t.account_id == selected_uid]
    st.subheader("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    st.dataframe(user_transactions)
    user_budgets = [b.__dict__ for b in budgets if getattr(b, "user_id", None) == selected_uid]
    st.subheader("–ë—é–¥–∂–µ—Ç—ã")
    st.table(user_budgets)
